// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  password       String?
  image          String?
  accounts       Account[]
  sessions       Session[]
  expenses       Expense[]
  newsLetterList NewsLetterList[]
  supportTicket  SupportTicket[]
  profile        Profile?
  userType       UserType?        @default(STAFF)
  lastLogin      DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  verified   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@unique([identifier, token])
}

model Profile {
  id           String   @id @default(cuid())
  userId       String   @unique
  firstName    String?
  lastName     String?
  mobileNumber String?
  department   String?
  role         String?
  staffID      String?
  photo        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Expense {
  id          String       @id @default(cuid())
  userId      String       @unique
  expenseType ExpenseType?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String
  createdAt   DateTime @default(now())
}

model NewsLetterList {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SupportTicket {
  id      String @id @default(cuid())
  userId  String @unique
  issue   String
  subject String
  message String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserType {
  STAFF
  ADMIN
  BRANCH_UNIT_HEAD
  COMPLIANCE_INTERNAL_CONTROL
  DEPARTMENT_HEAD
  HEAD_OF_COMPLIANCE
  FINANCE
  HEAD_OF_FINANCE
  BUSINESS_HEAD
  COUNTRY_HEAD
}

enum ExpenseType {
  HOTEL_ACCOMODATION
  FEEDING
  FLIGHT
  ROAD_TRIP
}

enum ExpenseStage {
  PENDING
  REVIEW
  APPROVED
  REJECTED
}

enum ExpenseStatus {
  ALERT_HIGH
  ALERT_LOW
  ALERT_FREQUENT
  NORMAL
}
